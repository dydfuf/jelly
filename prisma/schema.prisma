generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_SHADOW_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  userHashCode   String?
  accounts       Account[]
  sessions       Session[]
  AccountToGroup AccountToGroup[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AccountToGroup {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])
  userId  String @unique
  groupId String
}

model Group {
  id             String           @id @default(cuid())
  Memory         Memory[]
  Schedule       Schedule[]
  plan           plan[]
  AccountToGroup AccountToGroup[]
}

model Memory {
  id          String    @id @default(cuid())
  gGroup      Group     @relation(fields: [groupId], references: [id])
  groupId     String
  iimageList  ImageList @relation(fields: [imageListId], references: [id])
  imageListId String
  name        String
  content     String
  date        DateTime
}

model Image {
  id         String    @id @default(cuid())
  iImageList ImageList @relation(fields: [imageListId], references: [id])
  imageuri    String
  imageListId String
}

model ImageList {
  id     String   @id @default(cuid())
  Memory Memory[]
  Image  Image[]
}

model Schedule {
  id                  String            @id @default(cuid())
  group               Group             @relation(fields: [groupId], references: [id])
  title               String
  startDate           DateTime
  endDate             DateTime
  content             String
  recurringSchedule   RecurringSchedule @relation(fields: [recurringScheduleId], references: [id])
  groupId             String
  recurringScheduleId String
}

model RecurringSchedule {
  id       String     @id @default(cuid())
  Schedule Schedule[]
}

model plan {
  id          String   @id @default(cuid())
  group       Group    @relation(fields: [groupId], references: [id])
  title       String
  startDate   DateTime
  endDate     DateTime
  isUndecided Boolean
  content     String
  groupId     String
}
