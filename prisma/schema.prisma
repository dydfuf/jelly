generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_SHADOW_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  UserToGroup   UserToGroup[]
  Memory        Memory[]
  Schedule      Schedule[]
  plan          plan[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserToGroup {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])
  userId  String @unique
  groupId String
}

model Group {
  id          String        @id @default(cuid())
  Memory      Memory[]
  Schedule    Schedule[]
  plan        plan[]
  UserToGroup UserToGroup[]
}

model Memory {
  id                String   @id @default(cuid())
  group             Group    @relation(fields: [groupId], references: [id])
  groupId           String
  uploadedImageUrls String[]
  title             String
  location          String
  content           String
  date              DateTime
  user              User     @relation(fields: [userId], references: [id])
  userId            String
}

model Schedule {
  id                  String             @id @default(cuid())
  title               String
  startDate           DateTime
  endDate             DateTime
  content             String
  groupId             String
  isAllDay            Boolean
  group               Group              @relation(fields: [groupId], references: [id])
  recurringScheduleId String?
  RecurringSchedule   RecurringSchedule? @relation(fields: [recurringScheduleId], references: [id])
  user                User               @relation(fields: [userId], references: [id])
  userId              String
}

model RecurringSchedule {
  id       String     @id @default(cuid())
  Schedule Schedule[]
}

model plan {
  id          String   @id @default(cuid())
  group       Group    @relation(fields: [groupId], references: [id])
  title       String
  startDate   DateTime
  endDate     DateTime
  isUndecided Boolean
  content     String
  groupId     String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}
